#!/bin/bash

SSH_DIR="$HOME/.ssh"
CONNECTIONS_FILE="$SSH_DIR/remotes"

# Function to list and connect to a remote
function connect_remote() {
    # List all the connection names and store them in an array
    CONNECTIONS=($(cat $CONNECTIONS_FILE | grep '^conn:' | cut -d' ' -f2-))

    # Ask user to select a connection
    echo "Select a connection:"
    select CONNECTION in "${CONNECTIONS[@]}"; do
        if [[ -n "$CONNECTION" ]]; then
            # Store the selected connection config in variables
            ADDR=$(awk -v conn="$CONNECTION" -F': ' '$0 ~ "^conn: " conn {getline; print $2}' "$CONNECTIONS_FILE")
            PORT=$(awk -v conn="$CONNECTION" -F': ' '$0 ~ "^conn: " conn {getline; getline; print $2}' "$CONNECTIONS_FILE")
            USER=$(awk -v conn="$CONNECTION" -F': ' '$0 ~ "^conn: " conn {getline; getline; getline; print $2}' "$CONNECTIONS_FILE")
            PASS=$(awk -v conn="$CONNECTION" -F': ' '$0 ~ "^conn: " conn {getline; getline; getline; getline; print $2}' "$CONNECTIONS_FILE")
            PKEY=$(awk -v conn="$CONNECTION" -F': ' '$0 ~ "^conn: " conn {getline; getline; getline; getline; getline; print $2}' "$CONNECTIONS_FILE")

            # Check if there is a password
            if [[ -n "$PASS" ]]; then
                # Ask user if they want their password printed
                read -p "Do you want your password printed? (y/n): " PRINT_PASS

                # echo the password if the user wants it printed
                if [[ "$PRINT_PASS" == "y" ]]; then
                    echo "PASS: $PASS"
                fi
            fi

            # Based on what is set, create the command (PKEY, USER, ADDR, PORT)
            # Initiate the command
            SSH_COMMAND="ssh"

            # Add the pkey if it is set
            if [[ -n "$PKEY" ]]; then
                SSH_COMMAND="$SSH_COMMAND -i $SSH_DIR/$PKEY"
            fi

            # Add the port if it is set   
            if [[ -n "$PORT" ]]; then
                SSH_COMMAND="$SSH_COMMAND -p $PORT"
            fi

            # Add the user and addr if they are set
            if [[ -n "$USER" ]] && [[ -n "$ADDR" ]]; then
                SSH_COMMAND="$SSH_COMMAND $USER@$ADDR"
            fi

            # Print the ssh command
            echo "SSH_COMMAND: $SSH_COMMAND"


            # Ask user if they want to run the SSH command
            read -p "Do you want to run the SSH command? (y/n): " RUN_COMMAND
            if [[ "$RUN_COMMAND" == "y" ]]; then
                # Execute the ssh command
                eval $SSH_COMMAND
            else
                echo "SSH command not executed."
            fi

            # Exit
            exit 0
        fi
    done
}

# Function to add a new remote
function add_remote() {
    read -p "Connection name: " conn
    read -p "Address: " addr
    read -p "Port (default: 22): " port
    read -p "Username: " user
    read -p "Password (optional): " pass
    read -p "Private key filename (optional): " pkey

    # Use default port if none provided
    port=${port:-22}

    # Append to remotes file
    {
        echo "conn: $conn"
        echo "  addr: $addr"
        echo "  port: $port"
        echo "  user: $user"
        echo "  pass: $pass"
        echo "  pkey: $pkey"
        echo ""
    } >> "$CONNECTIONS_FILE"
    
    echo "Remote '$conn' added successfully!"
}

# Function to remove a remote
function remove_remote() {
    CONNECTIONS=($(cat $CONNECTIONS_FILE | grep '^conn:' | cut -d' ' -f2-))
    
    echo "Select connection to remove:"
    select CONNECTION in "${CONNECTIONS[@]}"; do
        if [[ -n "$CONNECTION" ]]; then
            # Add confirmation dialog
            read -p "Are you sure you want to remove '$CONNECTION'? (y/n): " CONFIRM
            if [[ "$CONFIRM" != "y" ]]; then
                echo "Operation cancelled."
                break
            fi
            
            # Create temporary file
            temp_file=$(mktemp)
            # Remove the connection block (conn and following 4-5 lines)
            awk -v conn="$CONNECTION" '
                $0 ~ "^conn: " conn {
                    for(i=0; i<=5; i++) getline
                    next
                }
                {print}
            ' "$CONNECTIONS_FILE" > "$temp_file"
            mv "$temp_file" "$CONNECTIONS_FILE"
            echo "Remote '$CONNECTION' removed successfully!"
            break
        fi
    done
}

# Function to edit a remote
function edit_remote() {
    CONNECTIONS=($(cat $CONNECTIONS_FILE | grep '^conn:' | cut -d' ' -f2-))
    
    echo "Select connection to edit:"
    select CONNECTION in "${CONNECTIONS[@]}"; do
        if [[ -n "$CONNECTION" ]]; then
            # Get current values
            CURR_ADDR=$(awk -v conn="$CONNECTION" -F': ' '$0 ~ "^conn: " conn {getline; print $2}' "$CONNECTIONS_FILE")
            CURR_PORT=$(awk -v conn="$CONNECTION" -F': ' '$0 ~ "^conn: " conn {getline; getline; print $2}' "$CONNECTIONS_FILE")
            CURR_USER=$(awk -v conn="$CONNECTION" -F': ' '$0 ~ "^conn: " conn {getline; getline; getline; print $2}' "$CONNECTIONS_FILE")
            CURR_PASS=$(awk -v conn="$CONNECTION" -F': ' '$0 ~ "^conn: " conn {getline; getline; getline; getline; print $2}' "$CONNECTIONS_FILE")
            CURR_PKEY=$(awk -v conn="$CONNECTION" -F': ' '$0 ~ "^conn: " conn {getline; getline; getline; getline; getline; print $2}' "$CONNECTIONS_FILE")

            # Prompt for new values, using current values as defaults
            read -p "Address [$CURR_ADDR]: " addr
            read -p "Port [$CURR_PORT]: " port
            read -p "Username [$CURR_USER]: " user
            read -p "Password [$CURR_PASS]: " pass
            read -p "Private key filename [$CURR_PKEY]: " pkey

            # Use current values if no new input
            addr=${addr:-$CURR_ADDR}
            port=${port:-$CURR_PORT}
            user=${user:-$CURR_USER}
            pass=${pass:-$CURR_PASS}
            pkey=${pkey:-$CURR_PKEY}

            # Create temporary file
            temp_file=$(mktemp)
            
            # Replace the connection block
            awk -v conn="$CONNECTION" -v addr="$addr" -v port="$port" \
                -v user="$user" -v pass="$pass" -v pkey="$pkey" '
                $0 ~ "^conn: " conn {
                    print $0
                    print "  addr:", addr
                    print "  port:", port
                    print "  user:", user
                    print "  pass:", pass
                    print "  pkey:", pkey
                    print ""
                    for(i=0; i<=5; i++) getline
                    next
                }
                {print}
            ' "$CONNECTIONS_FILE" > "$temp_file"
            mv "$temp_file" "$CONNECTIONS_FILE"
            echo "Remote '$CONNECTION' updated successfully!"
            break
        fi
    done
}

# Function to initialize the remote configuration
function init_remote() {
    # Create SSH directory if it doesn't exist
    if [[ ! -d "$SSH_DIR" ]]; then
        mkdir -p "$SSH_DIR"
        chmod 700 "$SSH_DIR"
        echo "Created SSH directory: $SSH_DIR"
    fi

    # Create connections file if it doesn't exist
    if [[ ! -f "$CONNECTIONS_FILE" ]]; then
        touch "$CONNECTIONS_FILE"
        chmod 600 "$CONNECTIONS_FILE"
        echo "Created connections file: $CONNECTIONS_FILE"
    else
        echo "Configuration already initialized"
    fi
}

# Function to display help message
function show_help() {
    echo "Usage: remote [command]"
    echo ""
    echo "Commands:"
    echo "  init          Initialize remote configuration"
    echo "  go, connect   Connect to a remote"
    echo "  add           Add a new remote"
    echo "  remove, rm    Remove a remote"
    echo "  edit          Edit an existing remote"
    echo "  list, ls      List all remotes"
    echo "  help          Show this help message (default)"
    echo "  backup        Backup remotes to timestamped file"
    echo "  test          Test connection to a remote"
    echo "  search        Search through remotes"
    echo "  import        Import remotes from another file"
}

# Function to list remotes
function list_remotes() {
    echo "Available connections:"
    grep '^conn:' "$CONNECTIONS_FILE" | cut -d' ' -f2-
}

# Function to backup remotes
function backup_remotes() {
    BACKUP_FILE="$SSH_DIR/remotes_backup_$(date +%Y%m%d_%H%M%S)"
    cp "$CONNECTIONS_FILE" "$BACKUP_FILE"
    echo "Backup created at: $BACKUP_FILE"
}

# Function to test a remote connection
function test_remote() {
    # List and select connection similar to connect_remote
    CONNECTIONS=($(cat $CONNECTIONS_FILE | grep '^conn:' | cut -d' ' -f2-))
    
    echo "Select a connection to test:"
    select CONNECTION in "${CONNECTIONS[@]}"; do
        if [[ -n "$CONNECTION" ]]; then
            # Get connection details (similar to connect_remote)
            ADDR=$(awk -v conn="$CONNECTION" -F': ' '$0 ~ "^conn: " conn {getline; print $2}' "$CONNECTIONS_FILE")
            PORT=$(awk -v conn="$CONNECTION" -F': ' '$0 ~ "^conn: " conn {getline; getline; print $2}' "$CONNECTIONS_FILE")
            USER=$(awk -v conn="$CONNECTION" -F': ' '$0 ~ "^conn: " conn {getline; getline; getline; print $2}' "$CONNECTIONS_FILE")
            PKEY=$(awk -v conn="$CONNECTION" -F': ' '$0 ~ "^conn: " conn {getline; getline; getline; getline; getline; print $2}' "$CONNECTIONS_FILE")

            # Build test command
            TEST_COMMAND="ssh -o ConnectTimeout=5 -o BatchMode=yes"
            [[ -n "$PKEY" ]] && TEST_COMMAND="$TEST_COMMAND -i $SSH_DIR/$PKEY"
            [[ -n "$PORT" ]] && TEST_COMMAND="$TEST_COMMAND -p $PORT"
            TEST_COMMAND="$TEST_COMMAND $USER@$ADDR exit"

            echo "Testing connection to $CONNECTION..."
            if eval $TEST_COMMAND >/dev/null 2>&1; then
                echo "✅ Connection successful!"
            else
                echo "❌ Connection failed!"
            fi
            break
        fi
    done
}

# Function to search remotes
function search_remotes() {
    read -p "Enter search term: " SEARCH_TERM
    echo "Matching connections:"
    awk -v search="$SEARCH_TERM" '
        /^conn:/ {
            conn=$0
            getline addr
            getline port
            getline user
            if (tolower(conn) ~ tolower(search) || tolower(addr) ~ tolower(search) || tolower(user) ~ tolower(search)) {
                print conn
            }
        }
    ' "$CONNECTIONS_FILE"
}

# Main command parser
case "${1:-help}" in
    "init")
        init_remote
        ;;
    "go"|"connect")
        connect_remote
        ;;
    "add")
        add_remote
        ;;
    "remove"|"rm")
        remove_remote
        ;;
    "edit")
        edit_remote
        ;;
    "list"|"ls")
        list_remotes
        ;;
    "help"|*)
        show_help
        ;;
esac

